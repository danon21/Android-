/**
 * pg_service 1.0
 * pg_service
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package ru.data.apis

import io.swagger.client.models.EmptyResponse
import io.swagger.client.models.GameScore
import io.swagger.client.models.UserName
import io.swagger.client.models.UserRankResponse

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "https://shiny-space-fiesta-ppw9xv6g6w92rw7q-8080.app.github.dev") : ApiClient(basePath) {

    /**
     * 
     * A handle for getting scores 
     * @param userName  (optional)
     * @return kotlin.Array<GameScore>
     */
    @Suppress("UNCHECKED_CAST")
    fun scoresGet(userName: UserName? = null): kotlin.Array<GameScore> {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (userName != null) {
                put("user_name", listOf(userName.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/scores", query = localVariableQuery
        )
        val response = request<kotlin.Array<GameScore>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<GameScore>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * A handle for posting player&#x27;s score 
     * @param body  
     * @return EmptyResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun scoresUploadPost(body: GameScore): EmptyResponse {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/scores/upload"
        )
        val response = request<EmptyResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EmptyResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * A handle for getting user&#x27;s rank 
     * @param userName  
     * @return UserRankResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun userRankGet(userName: UserName): UserRankResponse {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("user_name", listOf(userName.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user_rank", query = localVariableQuery
        )
        val response = request<UserRankResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserRankResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
